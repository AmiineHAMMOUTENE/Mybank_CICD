name: MyBank CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  APP_ENV: test
  DATABASE_URL: "mysql://root:root@127.0.0.1:3306/mybank_test?serverVersion=8.0&charset=utf8mb4"

jobs:
  # Job 1: Tests Backend Symfony
  backend-tests:
    name: 🐘 Backend Tests (Symfony)
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: mybank_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, pdo, zip
          coverage: none

      - name: 📦 Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: api/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('api/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: 🔧 Install Composer dependencies
        working-directory: ./api
        run: |
          composer install --no-progress --no-suggest --no-interaction --prefer-dist --optimize-autoloader

      - name: 📝 Create .env.test file
        working-directory: ./api
        run: |
          echo "APP_ENV=test" > .env.test
          echo "APP_SECRET=test-secret-key-for-ci" >> .env.test
          echo "DATABASE_URL=mysql://root:root@127.0.0.1:3306/mybank_test?serverVersion=8.0&charset=utf8mb4" >> .env.test

      - name: 🗄️ Setup database
        working-directory: ./api
        run: |
          php bin/console doctrine:database:create --env=test --if-not-exists
          php bin/console doctrine:migrations:migrate --env=test --no-interaction

      - name: 🧪 Run Symfony tests
        working-directory: ./api
        run: |
          # Créer le répertoire des tests s'il n'existe pas
          mkdir -p tests
          # Si PHPUnit est configuré, lancer les tests
          if [ -f "phpunit.xml.dist" ] || [ -f "phpunit.xml" ]; then
            php bin/phpunit
          else
            echo "✅ No PHPUnit configuration found, skipping tests"
          fi

      - name: 🔍 Validate Symfony application
        working-directory: ./api
        run: |
          php bin/console lint:container
          php bin/console doctrine:schema:validate --skip-sync

  # Job 2: Tests Frontend React
  frontend-tests:
    name: ⚛️ Frontend Tests (React/Next.js)
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: front/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./front
        run: npm ci

      - name: 📝 Create .env.local for build
        working-directory: ./front
        run: |
          echo "NEXT_PUBLIC_API_BASE_URL=http://localhost:8082/api" > .env.local

      - name: 🏗️ Build frontend
        working-directory: ./front
        run: npm run build

      - name: 🧪 Run frontend tests
        working-directory: ./front
        run: |
          # Si des tests existent, les lancer
          if npm run test --dry-run 2>/dev/null; then
            npm run test -- --watchAll=false --coverage
          else
            echo "✅ No tests configured, skipping frontend tests"
          fi

      - name: 🔍 Lint check
        working-directory: ./front
        run: |
          if npm run lint --dry-run 2>/dev/null; then
            npm run lint
          else
            echo "✅ No linting configured, skipping lint check"
          fi

  # Job 3: Integration Tests avec Docker
  integration-tests:
    name: 🐳 Integration Tests (Docker)
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🚀 Start services with Docker Compose
        run: |
          cd api
          # Créer le fichier .env.local pour le frontend
          cd ../front
          echo "NEXT_PUBLIC_API_BASE_URL=http://localhost:8082/api" > .env.local
          
          # Retourner au dossier api et démarrer les services
          cd ../api
          docker-compose up -d --build
          
          # Attendre que les services soient prêts
          echo "⏳ Waiting for services to be ready..."
          sleep 30
          
          # Vérifier que les services sont en cours d'exécution
          docker-compose ps

      - name: 🗄️ Setup database in Docker
        run: |
          cd api
          # Exécuter les migrations dans le conteneur
          docker-compose exec -T backend php bin/console doctrine:migrations:migrate --no-interaction

      - name: 🧪 Test API endpoints
        run: |
          cd api
          
          # Tester l'endpoint de santé (si disponible)
          echo "🔍 Testing API health..."
          curl -f http://localhost:8082/api || echo "⚠️ API health check failed"
          
          # Tester les endpoints d'authentification
          echo "🔍 Testing registration endpoint..."
          REGISTER_RESPONSE=$(curl -s -X POST http://localhost:8082/api/register \
            -H "Content-Type: application/json" \
            -d '{"name":"Test User","email":"test@example.com","password":"testpass123"}')
          echo "Registration response: $REGISTER_RESPONSE"
          
          echo "🔍 Testing login endpoint..."
          LOGIN_RESPONSE=$(curl -s -X POST http://localhost:8082/api/login \
            -H "Content-Type: application/json" \
            -d '{"email":"test@example.com","password":"testpass123"}')
          echo "Login response: $LOGIN_RESPONSE"
          
          # Tester les endpoints des catégories
          echo "🔍 Testing categories endpoint..."
          curl -f http://localhost:8082/api/categories || echo "⚠️ Categories endpoint test failed"
          
          # Tester les endpoints des opérations
          echo "🔍 Testing operations endpoint..."
          curl -f http://localhost:8082/api/operations || echo "⚠️ Operations endpoint test failed"

      - name: 📋 Show Docker logs on failure
        if: failure()
        run: |
          cd api
          echo "🔍 Backend logs:"
          docker-compose logs backend
          echo "🔍 Database logs:"
          docker-compose logs database

      - name: 🛑 Stop Docker services
        if: always()
        run: |
          cd api
          docker-compose down -v

  # Job 4: Build et Push Docker Images
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        if: env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != ''
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: 🏗️ Build Docker images
        run: |
          cd api
          docker-compose build

      - name: 🏷️ Tag Docker images
        run: |
          # Tagger les images pour Docker Hub
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          docker tag api-backend-1 mybank/backend:$BRANCH_NAME
          docker tag api-backend-1 mybank/backend:latest
          
          cd ../front
          docker build -t mybank/frontend:$BRANCH_NAME -t mybank/frontend:latest .

      - name: 📤 Push to Docker Hub
        if: env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != ''
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          docker push mybank/backend:$BRANCH_NAME
          docker push mybank/backend:latest
          docker push mybank/frontend:$BRANCH_NAME
          docker push mybank/frontend:latest

      - name: 💾 Save Docker images as artifacts
        if: env.DOCKER_USERNAME == '' || env.DOCKER_PASSWORD == ''
        run: |
          mkdir -p docker-images
          docker save mybank/backend:latest | gzip > docker-images/backend.tar.gz
          docker save mybank/frontend:latest | gzip > docker-images/frontend.tar.gz

      - name: 📦 Upload Docker images artifacts
        if: env.DOCKER_USERNAME == '' || env.DOCKER_PASSWORD == ''
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: docker-images/
          retention-days: 7

  # Job 5: Deploy (optionnel)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy notification
        run: |
          echo "🎉 Deployment ready!"
          echo "✅ All tests passed"
          echo "✅ Docker images built successfully"
          echo "📦 Images are ready for production deployment"
          echo ""
          echo "To deploy manually:"
          echo "1. Pull images: docker pull mybank/backend:latest && docker pull mybank/frontend:latest"
          echo "2. Run: docker-compose -f docker-compose.prod.yml up -d"

      # Déploiement automatique (à décommenter si serveur disponible)
      # - name: 🔑 Setup SSH
      #   if: secrets.DEPLOY_HOST != ''
      #   uses: webfactory/ssh-agent@v0.8.0
      #   with:
      #     ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
      
      # - name: 🚀 Deploy to server
      #   if: secrets.DEPLOY_HOST != ''
      #   run: |
      #     ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} '
      #       cd /path/to/mybank &&
      #       docker-compose pull &&
      #       docker-compose up -d --remove-orphans &&
      #       docker system prune -f
      #     '
